pipeline {
  agent {
    docker {
      image 'python:3.11'
      args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  environment {
  // Jenkins Credentials: โทเคน SonarQube เก็บไว้ชื่อ 'sonarqube-fastapi'
  SONARQUBE = credentials('sonarqube-fastapi')
  }
  stages {
    stage('Checkout') {
      steps {
  // ใช้ repo ที่ผู้ใช้ระบุ
  git branch: 'main', url: 'https://github.com/Thanaphum-6510110194/Docker-Jenkins-FastAPI'
      }
    }

    stage('Setup venv') {
      steps {
        sh '''
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        '''
      }
    }

    stage('Run Tests & Coverage') {
      steps {
        sh '''
          . venv/bin/activate
          pytest --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml
        '''
      }
      post {
        always {
          // เก็บ coverage.xml ไว้ดูย้อนหลังได้
          archiveArtifacts artifacts: 'coverage.xml', onlyIfSuccessful: true
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('sonarqube-25.8.0.112029') {
          // ใช้ SonarQube Scanner ที่กำหนดชื่อไว้
          sh '''
            docker run --rm \
              -e SONAR_HOST_URL="$SONAR_HOST_URL" \
              -e SONAR_LOGIN="$SONAR_AUTH_TOKEN" \
              -v "$PWD:/usr/src" \
              sonarsource/sonarfastapi-cli \
              -Dsonar.projectKey=fastapi-clean-demo \
              -Dsonar.projectName="FastAPI Clean Demo" \
              -Dsonar.sources=app \
              -Dsonar.tests=tests \
              -Dsonar.python.coverage.reportPaths=coverage.xml
          '''
        }
      }
    }

    stage('Quality Gate') {
      steps {
        // ต้องตั้ง Webhook ใน SonarQube แล้วเท่านั้น (เลือกใส่ก็ได้)
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh 'docker build -t fastapi-app:latest .'
      }
    }

    stage('Deploy Container') {
      steps {
        sh '''
          docker rm -f fastapi-app || true
          docker run -d --name fastapi-app -p 8000:8000 fastapi-app:latest
        '''
      }
    }
  }

  post {
    always {
      echo "Pipeline finished"
    }
  }
}
